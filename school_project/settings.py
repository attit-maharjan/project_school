

"""
Django settings for BIVGS project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-fgom^4x1m-mhxgw)7o#gm(ls@5+m4j)$e(t+4%#=)qbtaymc_#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ------------------------------------------------
# üåê ALLOWED HOSTS
# ------------------------------------------------
# üü° ALLOWED_HOSTS ‚Äî Currently Empty
# In development, it's okay to leave this as an empty list.
# However, for better local testing, it's good to include:
# ALLOWED_HOSTS = ['127.0.0.1', 'localhost']
#
# ‚ö†Ô∏è IMPORTANT FOR DEPLOYMENT:
# Set this to the domain name(s) your app is served on.
# Example for production:
# ALLOWED_HOSTS = ['yourdomain.com', 'www.yourdomain.com']
ALLOWED_HOSTS = []




# =====================================================
# APPLICATION DEFINITION
# =====================================================

INSTALLED_APPS = [
    # -------------------------------------------------
    # üîπ Django Default Apps
    # -------------------------------------------------
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # -------------------------------------------------
    # üîπ Third-Party Packages
    # -------------------------------------------------
    'widget_tweaks',  # Enables form field customization directly in templates (e.g., using |add_class)

    # 'rest_framework',  # Uncomment when adding Django REST API features

    # -------------------------------------------------
    # üîπ Local Apps (Custom Project Logic)
    # -------------------------------------------------
    'users.apps.UsersConfig',               # Handles user authentication and profile management
    'the_school.apps.TheSchoolConfig',      # Front-end structure + school settings (subjects, grades, etc.)
    'enrollments.apps.EnrollmentsConfig',   # Tracks student placements & teacher-class assignments
    'exams.apps.ExamsConfig',                # Manages exams, grades, and evaluation logic
    'messaging.apps.MessagingConfig',       # üì¨ Handles internal user messaging
]




MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'school_project.urls'

TEMPLATES = [
    {
        # Backend engine for Django templates
        'BACKEND': 'django.template.backends.django.DjangoTemplates',

        # List of directories where Django will search for templates
        'DIRS': [BASE_DIR / 'templates'],  # Custom global templates directory (outside apps)

        # Whether to include app-specific templates (e.g., app_name/templates/)
        'APP_DIRS': True,

        # Context processors add variables available in every template
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',  # Includes debug info for templates
                'django.template.context_processors.request',  # Provides request context
                'django.contrib.auth.context_processors.auth',  # Provides user authentication context
                'django.contrib.messages.context_processors.messages',  # Provides message context
                'the_school.context_processors.global_school_data',  # Custom context processor for global school data
            ],
        },
    },
]



WSGI_APPLICATION = 'school_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True





# ======================================================================================
# STATIC FILES CONFIGURATION
# ======================================================================================
# - Each app should have its own static folder following this structure:
#     /app_name/static/app_name/
# - This ensures Django automatically finds static files inside each app.
#
# - The global "static/" folder (same level as manage.py) is used for shared static
#   files across the entire project. For example:
#     /static/shared/styles.css
#
# - To make sure Django recognizes this global static folder, we must explicitly
#   define it using STATICFILES_DIRS.
#
# - In development (DEBUG=True), Django will serve static files automatically.
#
# - In production, run `python manage.py collectstatic` to gather all static files
#   into STATIC_ROOT, which should then be served by your web server (e.g., Nginx).
#
# - In your templates, always use `{% load static %}` and:
#     <link rel="stylesheet" href="{% static 'shared/styles.css' %}">
# ======================================================================================

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
# Static files URL prefix
STATIC_URL = 'static/'

# Global static folder (used for shared assets like site-wide CSS, JS, images)
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Directory where `collectstatic` will place all static files (used in production)
STATIC_ROOT = BASE_DIR / "staticfiles"


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ========================
# SMTP Configuration for Sending Emails
# ========================

# Email backend used for sending emails. This project uses the standard SMTP backend.
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# SMTP server host (e.g., 'smtp.gmail.com' for Gmail)
EMAIL_HOST = 'smtp.gmail.com'

# SMTP port for sending emails securely (587 for TLS, 465 for SSL)
EMAIL_PORT = 587

# Enable TLS (recommended if not using SSL)
EMAIL_USE_TLS = True

# Disable SSL (use either TLS or SSL, not both)
EMAIL_USE_SSL = False

# Email account credentials used to authenticate with the SMTP server
EMAIL_HOST_USER = 'bivgs.central@gmail.com'
EMAIL_HOST_PASSWORD = 'imwknrkjnmpsdgwn'  # Use an app-specific password if using Gmail

# Default "From" address used in email headers
DEFAULT_FROM_EMAIL = 'bivgs.central@gmail.com'

# Admins who will receive error notifications
ADMINS = [('Admin Name', 'admin@example.com')]


# ========================
# Notes:
# - Ensure EMAIL_USE_TLS and EMAIL_USE_SSL are not both True.
# - Secure your credentials in production using environment variables or Django's secrets management.
# ========================


# ========================
# Path to the CSV data directory
# This allows centralized and reusable access to CSV files stored in 'data/csv'
# Example use: settings.CSV_DATA_DIR / "department.csv"
# ========================
CSV_DATA_DIR = BASE_DIR / "data" / "csv"



# ========================
# Media files (uploaded content like profile photos)
# ========================
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'



# =====================================================
#               AUTHENTICATION CONFIGURATION
# =====================================================
# Notes:
# - This section handles the custom user model, login/logout redirection,
#   and authentication backends.
# - Make sure any custom login logic or middleware respects these settings.
# - Keep your URLs in sync with your 'accounts' app URL configuration.
# =====================================================

# =====================================================
#                   CUSTOM USER MODEL
# =====================================================
AUTH_USER_MODEL = 'users.User'  # Points to the custom user model

# =====================================================
#                  AUTH REDIRECT SETTINGS
# =====================================================
LOGIN_URL = 'users:login'  # Where users are sent if not logged in
LOGIN_REDIRECT_URL = 'the_school:index'  # Landing page after login (customize per role)
LOGOUT_REDIRECT_URL = 'users:login'  # Where users go after logging out

# =====================================================
#              AUTHENTICATION BACKENDS
# =====================================================
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Default backend for authentication
]
