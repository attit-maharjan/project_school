# Generated by Django 5.1.6 on 2025-04-21 17:35

import django.core.validators
import the_school.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Accreditor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('registration_number', models.CharField(max_length=100, unique=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('accreditation_date', models.DateField()),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Expired', 'Expired'), ('Pending', 'Pending')], default='Active', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('singleton', models.BooleanField(default=True, unique=True)),
                ('school_name', models.CharField(max_length=255, unique=True)),
                ('school_logo', models.ImageField(blank=True, null=True, upload_to=the_school.models.school_logo_upload_path)),
                ('school_motto', models.CharField(blank=True, max_length=255, null=True)),
                ('established_year', models.PositiveIntegerField(blank=True, help_text='Year the school was established (must be reasonable).', null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2025)])),
                ('address', models.TextField()),
                ('contact_number', models.CharField(help_text='Phone number (e.g., +123456789).', max_length=20, validators=[django.core.validators.RegexValidator('^\\+?\\d{7,15}$', 'Enter a valid contact number.')])),
                ('email_address', models.EmailField(max_length=254)),
                ('website_url', models.URLField(blank=True, null=True)),
                ('social_media_links', models.JSONField(default=dict, help_text="JSON format (e.g., {'Facebook': 'https://fb.com/school'})", validators=[the_school.models.validate_social_links])),
                ('homepage_intro', models.TextField(blank=True, help_text='Optional welcome message for homepage (index.html).', null=True)),
                ('about_us_title', models.CharField(blank=True, help_text='Optional title override for the About Us page.', max_length=255, null=True)),
                ('about_us_subheading1', models.CharField(blank=True, max_length=255, null=True)),
                ('about_us_paragraph1', models.TextField(blank=True, null=True)),
                ('about_us_paragraph2', models.TextField(blank=True, null=True)),
                ('about_us_subheading2', models.CharField(blank=True, max_length=255, null=True)),
                ('about_us_paragraph3', models.TextField(blank=True, null=True)),
                ('contact_us_title', models.CharField(blank=True, max_length=255, null=True)),
                ('contact_us_paragraph1', models.TextField(blank=True, null=True)),
                ('contact_us_paragraph2', models.TextField(blank=True, null=True)),
                ('privacy_policy', models.TextField(blank=True, help_text='Displayed in privacy_policy.html', null=True)),
                ('terms_of_service', models.TextField(blank=True, help_text='Displayed in terms_of_service.html', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('accreditation_details', models.ManyToManyField(blank=True, related_name='schools', to='the_school.accreditor')),
            ],
            options={
                'verbose_name': 'School Settings',
                'verbose_name_plural': 'School Settings',
                'constraints': [models.UniqueConstraint(fields=('singleton',), name='unique_school_settings_constraint')],
            },
        ),
    ]
